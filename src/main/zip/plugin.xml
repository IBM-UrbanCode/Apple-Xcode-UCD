<?xml version="1.0" encoding="UTF-8"?>
<!--
- Licensed Materials - Property of IBM Corp.
- IBM UrbanCode Deploy
- (c) Copyright IBM Corporation 2011, 2014. All Rights Reserved.
-
- U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by
- GSA ADP Schedule Contract with IBM Corp.
-->
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1"
        xmlns:server="http://www.urbancode.com/PluginServerXMLSchema_v1"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier id="com.ibm.rational.iOS" name="iOS" version="1"/>
    <description>
        Provides mobile support for working with iOS.
        Refer to the ios_plugin.pdf file, which is embedded in the plug-in .zip file for more documentation.
    </description>
    <tag>Mobile/iOS</tag>
    <server:required-server-version>6.0.1.0</server:required-server-version>
  </header>
  
  <!-- Application management based steps -->
  
  <step-type name="Install Application">
    <description>Installs the iOS application (.ipa or .app).</description>
    <properties>
      <property name="app" required="true">
        <property-ui type="textBox"
                     label="Application Path"
                     description="The iOS application (.app or .ipa) to install."
                     default-value="${p:component/application}"/>
      </property>
      <property name="udid">
        <property-ui type="textBox"
                     label="Device Identifier"
                     description="The unique device identifier to target install on a 
                        physical device. Note: If the device identifier is specified, 
                        the Target OS will not be used."
                     default-value="${p?:resource/deviceID}"/>
      </property>
      <property name="targetOS">
        <property-ui type="textBox"
                     label="Target OS"
                     description="The target OS or SDK version, for example, 6.1 or 7.1-64.
                        Note: This can be used with the simulatorOS resource property, for 
                        example, ${p:resource/simulatorOS}-64."
                     default-value="${p?:resource/simulatorOSInstall}"/>
      </property>
      <property name="reinstall">
        <property-ui type="checkBox"
                     label="Reinstall"
                     description="Reinstall the app."/>
      </property>
      <property name="timeout">
        <property-ui type="textBox"
                     label="Timeout"
                     description="A timeout (in milliseconds), after which the 
                        device install attempt is stopped. By default, the step uses a
                        time out of 5 minutes."
                     default-value="300000"
                     hidden="true"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        properties.put("Status", "Success");
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            function testOutput(lineNumber, line) {
                commandOut.println("Recieved Error");
                commandOut.println(lineNumber.toString() + " : " + line);
                var errors = properties.get("Error");
                if (errors == null) {
                    errors = new java.util.ArrayList();
                }
                errors.add(line);
                properties.put("Error", errors);

                properties.put("Status", "Failure");
            }
            scanner.register("(?i)Failure", function(lineNumber, line) {
                testOutput(lineNumber, line)
            });
            scanner.register("(?i)Error", function(lineNumber, line) {
                testOutput(lineNumber, line)
            });
            scanner.scan();

            var errors = properties.get("Error");
            if (errors != null) {
                properties.put("Error", errors.toString());
            }
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="installApp.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
  <step-type name="Remove Application">
    <description>Removes the iOS application.</description>
    <properties>
      <property name="bundleID" required="true">
        <property-ui type="textBox"
                     label="Application Bundle ID"
                     description="The bundle ID of the application to remove, for 
                     example, com.example.appName."
                     default-value="${p:component/bundleID}"/>
      </property>
      <property name="udid">
        <property-ui type="textBox"
                     label="Device Identifier"
                     description="The unique device identifier to target install on a 
                        physical device. Note: If the device identifier is specified, 
                        the Target OS will not be used."
                     default-value="${p?:resource/deviceID}"/>
      </property>
      <property name="targetOS">
        <property-ui type="textBox"
                     label="Target OS"
                     description="The target OS or SDK version, for example, 6.1 or 7.1-64.
                        Note: This can be used with the simulatorOS resource property, for 
                        example, ${p:resource/simulatorOS}-64."
                     default-value="${p?:resource/simulatorOSInstall}"/>
      </property>
      <property name="timeout">
        <property-ui type="textBox"
                     label="Timeout"
                     description="A timeout (in milliseconds), after which the 
                        device install attempt is stopped. By default, the step uses a
                        time out of 5 minutes.(For removing application from device only)"
                     default-value="300000"
                     hidden="true"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Error"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="uninstallApp.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
  <!-- Test based steps -->
  
  <step-type name="UI Test">
    <description>Runs the specified UI test against the application.</description>
    <properties>
      <property name="app" required="true">
        <property-ui type="textBox"
                     label="Application Path"
                     description="The iOS application (.app or .ipa) to test."
                     default-value="${p:component/application}"/>
      </property>
      <property name="script" required="true">
        <property-ui type="textBox"
                     label="Test Script"
                     description="The test script file (.js) to run."/>
      </property>
      <property name="outputDir" required="true">
        <property-ui type="textBox"
                     label="Output Directory"
                     description="The directory where the test output should be written to."
                     default-value="."/>
      </property>
      <property name="udid">
        <property-ui type="textBox"
                     label="Device Identifier"
                     description="The unique device identifier to target testing on a 
                        physical device. Note: If the device identifier is specified, 
                        the Simulator Type and Target OS will not be used."
                     default-value="${p?:resource/deviceID}"/>
      </property>
      <property name="simType">
        <property-ui type="textBox"
                     label="Simulator Type"
                     description="The simulator device type, for example, iPhone or 
                        iPhone Retina (4-inch 64-bit)."
                     default-value="${p?:resource/simulatorType}"/>
      </property>
      <property name="targetOS">
        <property-ui type="textBox"
                     label="Target OS"
                     description="The target OS or SDK version, for example, 6.1 or 7.1."
                     default-value="${p?:resource/simulatorOS}"/>
      </property>
      <property name="xcode">
        <property-ui type="textBox"
                     label="Path To Xcode"
                     description="The path to the Xcode installation. If the 
                        value is not specified, a default value of 
                        /Applications/Xcode.app is used."
                     default-value="${p?:resource/XcodePath}"
                     hidden="true"/>
      </property>
      <property name="traceTemplate">
        <property-ui type="textBox"
                     label="Trace Template"
                     description="The path, relative to the Xcode installation 
                        path, for the .tracetemplate file to use when running
                        the UI test. If no value is specified, a default value
                        of /Contents/Applications/Instruments.app/Contents/PlugIns/
                        AutomationInstrument.bundle/Contents/Resources/
                        Automation.tracetemplate is used."
                     default-value="${p?:resource/XcodeTraceTemplate}"
                     hidden="true"/>
      </property>
      <property name="xcrunPath">
        <property-ui type="textBox"
                     label="Path To xcrun"
                     description="The path to the xcrun tool. If the 
                        value is not specified, the value from the
                        system path is used."
                     default-value="${p?:resource/xcrunPath}"
                     hidden="true"/>
      </property>
      <property name="timeout">
        <property-ui type="textBox"
                     label="Timeout"
                     description="A timeout (in milliseconds), after which the 
                        UI test are stopped. By default, the step does not 
                        time out when no value is specified."
                     hidden="true"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        properties.put("Status", "Success");
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            function testOutput(lineNumber, line) {
                commandOut.println("Recieved Error");
                commandOut.println(lineNumber.toString() + " : " + line);
                var errors = properties.get("Error");
                if (errors == null) {
                    errors = new java.util.ArrayList();
                }
                errors.add(line);
                properties.put("Error", errors);

                properties.put("Status", "Failure");
            }
            scanner.register("(?i)Error:", function(lineNumber, line) {
                testOutput(lineNumber, line)
            });
            scanner.register("Fail:", function(lineNumber, line) {
                testOutput(lineNumber, line)
            });
            scanner.register("Instruments Trace Error", function(lineNumber, line) {
                testOutput(lineNumber, line)
            });
            scanner.scan();

            var errors = properties.get("Error");
            if (errors != null) {
                properties.put("Error", errors.toString());
            }
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="uiTest.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
  <!-- Tools based steps -->
  
  <step-type name="xcrun">
    <description>Runs the iOS xcrun command.</description>
    <properties>
      <property name="xcrunPath">
        <property-ui type="textBox"
                     label="Path To xcrun"
                     description="The path to the xcrun tool. If the 
                        value is not specified, the value from the
                        system path is used."
                     default-value="${p?:resource/xcrunPath}"/>
      </property>
      <property name="additionalArgs">
        <property-ui type="textAreaBox"
                     label="Additional Arguments"
                     description="Allows for providing additional arguments that are not
                        provided in the step properties for the xcrun command. The 
                        format can be a path to a file or a newLine-separated list 
                        of arguments. For example, /opt/test.properties or instruments or --sdk\nmacosx\n--show-sdk-path."/>
      </property>
      <property name="timeout">
        <property-ui type="textBox"
                     label="Timeout"
                     description="A timeout (in milliseconds), after which the 
                        xcrun process command is stopped. By default, the step does 
                        not time out when no value is specified."
                     hidden="true"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="xcrun.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
  <!-- Simulator based steps -->

  <step-type name="Start Simulator">
    <description>
        Starts a simulator. The step fails if a simulator is already running.
    </description>
    <properties>
      <property name="simType">
        <property-ui type="textBox"
                     label="Simulator Type"
                     description="The simulator device type, for example, iPhone or 
                        iPhone Retina (4-inch 64-bit)."
                     default-value="${p?:resource/simulatorType}"/>
      </property>
      <property name="targetOS">
        <property-ui type="textBox"
                     label="Target OS"
                     description="The target OS or SDK version, for example, 6.1 or 7.1."
                     default-value="${p?:resource/simulatorOS}"/>
      </property>
      <property name="xcode">
        <property-ui type="textBox"
                     label="Path To Xcode"
                     description="The path to the Xcode installation. If the 
                        value is not specified, a default value of 
                        /Applications/Xcode.app is used."
                     default-value="${p?:resource/XcodePath}"
                     hidden="true"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="startSimulator.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
  <step-type name="Stop Simulator">
    <description>
        Stops the running simulator. The step fails if no simulator is running.
    </description>
    <properties/>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="stopSimulator.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
</plugin>
